!<arch>
0-isupper.c/    0           0     0     644     257       `
#include <stdlib.h>
#include <stdio.h>
#include "main.h"
/* more headers goes there */

/**
* _isupper - checks for uppercase character
* @c: Variable text
* Return: Always 0.
*/
int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
		return (1);
	return (0);
}

0-memset.c/     0           0     0     644     329       `
#include <stdio.h>
#include <stdlib.h>
#include "main.h"


/**
 * *_memset - function that fills memory with a constant byte
 * @s: memory area
 * @b: constant byte
 * @n: no of bytes
 * Return: char
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		s[i] = b;
	}
	return (s);
}

0-strcat.c/     0           0     0     644     355       `
#include <stdio.h>
#include <stdlib.h>
#include "main.h"


/**
 * _strcat - concatenates two strings
 * @dest: destination
 * @src: source
 * Return: char
 */
char *_strcat(char *dest, char *src)
{
	int len, i, j;

	for (len = 0; dest[len] != '\0'; len++)
	{
	}

	for (i = len, j = 0; src[j] != '\0'; i++, j++)
	{
		dest[i] = src[j];
	}
	return (dest);
}

1-isdigit.c/    0           0     0     644     299       `
#include <stdlib.h>
#include <stdio.h>
#include "main.h"
/* more headers goes there */

/**
* _isdigit - function that check if it's a digit
* @c: takes in a character/digit
* Return: 1 if digit and 0 if anything else
*/
int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
		return (1);
	return (0);
}

1-memcpy.c/     0           0     0     644     373       `
#include <stdio.h>
#include <stdlib.h>
#include "main.h"


/**
 * *_memcpy - function that fills memory with a constant byte
 * @dest: destination
 * @src: source
 * @n: no of bytes
 * Return: char
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;
	unsigned int j;

	for (i = 0, j = 0; i < n; i++, j++)
	{
		dest[i] = src[j];
	}
	return (dest);
}

1-strncat.c/    0           0     0     644     396       `
#include <stdio.h>
#include <stdlib.h>
#include "main.h"


/**
 * _strncat - concatenates two strings
 * @dest: destination
 * @src: source
 * @n: input value
 * Return: char
 */
char *_strncat(char *dest, char *src, int n)
{
	int i, j;

	for (i = 0; dest[i] != '\0'; i++)
	{
	}

	j = 0;
	while (j < n && src[j] != '\0')
	{
		dest[i] = src[j];
		i++;
		j++;
	}
	dest[i] = '\0';
	return (dest);
}
100-atoi.c/     0           0     0     644     612       `
#include <stdio.h>
#include <stdlib.h>
#include "main.h"

/**
 * _atoi - converts a string to an integer.
 * @s: input string.
 * Return: integer.
 */
int _atoi(char *s)
{
	unsigned int count = 0, size = 0, oi = 0, pn = 1, m = 1, i;

	while (*(s + count) != '\0')
	{
		if (size > 0 && (*(s + count) < '0' || *(s + count) > '9'))
			break;

		if (*(s + count) == '-')
			pn *= -1;

		if ((*(s + count) >= '0') && (*(s + count) <= '9'))
		{
			if (size > 0)
				m *= 10;
			size++;
		}
		count++;
	}

	for (i = count - size; i < count; i++)
	{
		oi = oi + ((*(s + i) - 48) * m);
		m /= 10;
	}
	return (oi * pn);
}
2-strchr.c/     0           0     0     644     354       `
#include "main.h"
/**
 * _strchr - locates a character in a string,
 * @s: string.
 * @c: character.
 * Return: the pointer to the first occurrence of the character c.
 */
char *_strchr(char *s, char c)
{
	unsigned int i = 0;

	for (; *(s + i) != '\0'; i++)
		if (*(s + i) == c)
			return (s + i);
	if (*(s + i) == c)
		return (s + i);
	return ('\0');
}
2-strlen.c/     0           0     0     644     244       `
#include <stdio.h>
#include <stdlib.h>
#include "main.h"


/**
*_strlen - returns the length of a string..
*@s: value to evaluate.
*Return: len
*/
int _strlen(char *s)
{
	int len = 0;

	while (*s != '\0')
	{
		s++;
		len++;
	}
	return (len);
}
2-strncpy.c/    0           0     0     644     416       `
#include <stdio.h>
#include <stdlib.h>
#include "main.h"


/**
 * _strncpy - copy two strings
 * @dest: destination
 * @src: source
 * @n: input value
 * Return: char
 */
char *_strncpy(char *dest, char *src, int n)
{
	int len;
	int i = 0;

	for (len = 0; src[len] != '\0'; len++)
	{
	}
	while (src[i] != '0' && i < n)
	{
		dest[i] = src[i];
		i++;
	}
	while (i < n)
	{
		dest[i] = '\0';
		i++;
	}
	return (dest);
}
3-islower.c/    0           0     0     644     313       `
#include <stdlib.h>
#include <stdio.h>
#include "main.h"

/**
* _islower - Shows 1 if the input is a
* lowercase character. Another cases, shows 0
*
* @c: The character in ASCII code
*
* Return: 1 for lowercase. 0 for the rest.
*/
int _islower(int c)
{
	if (c > 97 && c < 123)
		return (1);
	else
		return (0);
}

3-puts.c/       0           0     0     644     247       `
#include <stdio.h>
#include <stdlib.h>
#include "main.h"


/**
 *_puts - prints a string, to stdout
 *@str: value to be evaluate.
 *Return: not.
 */
void _puts(char *str)
{
	while (*str != '\0')
	{
		_putchar(*str);
		str++;
	}
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     334       `
#include <stdio.h>
#include <stdlib.h>
#include "main.h"


/**
 * _strcmp - compare string values
 * @s1: input value
 * @s2: input value
 *
 * Return: s1[i] - s2[i]
 */
int _strcmp(char *s1, char *s2)
{
	int i = 0;

	while (s1[i] != '\0' && s2[i] != '\0')
	{
		if (s1[i] != s2[i])
			return (s1[i] - s2[i]);
		i++;
	}
	return (0);
}
3-strspn.c/     0           0     0     644     567       `
#include <stdio.h>
#include <stdlib.h>
#include "main.h"


/**
 * _strspn - function that fills memory with a constant byte
 * @s: string
 * @accept: contains bytes that may or may not compose parts of the string
 * Return: the number of bytes that compose the length
 */

unsigned int _strspn(char *s, char *accept)
{
	int i, j;
	unsigned int n;

	n = 0;
	for (i = 0; s[i] != '\0'; i++)
	{
		for (j = 0; accept[j] != '\0'; j++)
		{
			if (s[i] == accept[j])
			{
				n++;
				break;
			}
			if (accept[j + 1] == '\0')
			{
				return (n);
			}
		}
	}
	return (n);
}

4-isalpha.c/    0           0     0     644     325       `
#include <stdlib.h>
#include <stdio.h>
#include "main.h"

/**
* _isalpha - Shows 1 if the input is c
* letter Another cases, shows 0
*
* @c: The character in ASCII code
*
* Return: 1 for letters. Returns 0 otherwise
*/
int _isalpha(int c)
{
	if ((c > 65 && c < 91) || (c > 97 && c < 123))
		return (1);
	else
		return (0);
}

4-strpbrk.c/    0           0     0     644     475       `
#include "main.h"

/**
 * _strpbrk - searches a string for any of a set of bytes.
 * @s: first string.
 * @accept: second string.
 * Return: a pointer to the byte in s that matches one of the
 * bytes in accept, or NULL if no such byte is found.
 */
char *_strpbrk(char *s, char *accept)
{
	unsigned int i, j;

	for (i = 0; *(s + i) != '\0'; i++)
	{
		for (j = 0; *(accept + j) != '\0'; j++)
		{
			if (*(s + i) == *(accept + j))
				return (s + i);
		}
	}
	return ('\0');
}

5-strstr.c/     0           0     0     644     563       `
#include "main.h"

/**
 * _strstr - finds the first occurrence of the substring.
 * needle in the string haystack.
 * @haystack: entire string.
 * @needle: substring.
 * Return: pointer to the beginning of located substring or
 * NULL if the substring is not found.
*/
char *_strstr(char *haystack, char *needle)
{
	char *bh;
	char *pn;

	while (*haystack != '\0')
	{
		bh = haystack;
		pn = needle;

		while (*haystack != '\0' && *pn != '\0' && *haystack == *pn)
		{
			haystack++;
			pn++;
		}
		if (!*pn)
			return (bh);
		haystack = bh + 1;
	}
	return (0);
}

6-abs.c/        0           0     0     644     251       `
#include <stdlib.h>
#include <stdio.h>
#include "main.h"

/**
* _abs - gives the absolute value
* of an integer.
*
* @n: input number as an integer.
*
* Return: absolute value
*/
int _abs(int n)
{
	if (n >= 0)
		return (n);
	else
		return (n * -1);
}

9-strcpy.c/     0           0     0     644     373       `
#include <stdio.h>
#include <stdlib.h>
#include "main.h"

/**
 *_strcpy - update value.
 *@dest: value to be evaluate.
 *@src: value to be evaluate.
 *Return: dest
 */
char *_strcpy(char *dest, char *src)
{
	int len, i;

	for (len = 0; src[len] != 0; len++)
	{
	}

	for (i = 0; i <= len; i++)
	{
		*(dest + i) = src[i];
		if (src[i] == '\0')
			break;
	}
	return (dest);
}

_putchar.c/     0           0     0     644     257       `
#include <unistd.h>
#include "main.h"
/**
* _putchar - writes the character c to stdout
* @c: The character to print
*
* Return: On success 1.
* On error, -1 is returned, and errno is set appopriately.
*/
int _putchar(char c)
{
	return (write(1, &c, 1));
}

main.c/         0           0     0     644     142       `
#include "main.h"

int main(void)
{
	_puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
	return (0);
}
